name: Release
on:
  workflow_dispatch:
    inputs:
      release-version:
        description: "(WARNING: WILL TRIGGER A RELEASE) Release version e.g. v0.0.1"
        required: true
        type: string
env:
  GO_VERSION: 1.21.3
  GOPATH: ${{ github.workspace }}/go
  WORKING_DIR: ${{ github.workspace }}/go/src/github.com/ethereum/go-ethereum
jobs:
  build-binary:
    name: "Build binary for ${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Setup Go ${{ env.GO_VERSION }}"
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: "Prepare environment"
        id: env
        run: |
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
          echo "::set-output name=key::$(go env GOOS)_$(go env GOARCH)"
          echo "::set-output name=version::${GITHUB_REF##*/}"
      - name: "Check out project files"
        uses: actions/checkout@v2
        with:
          path: ${{ env.WORKING_DIR }}
      - name: "Build geth"
        # For MacOS, We use gtar and run purge command to workaround issue
        # https://github.com/actions/virtual-environments/issues/2619
        id: build
        working-directory: ${{ env.WORKING_DIR }}
        run: |-
          make geth
          mkdir -p build/artifact
          tar_file=build/artifact/geth_${{ steps.env.outputs.version }}_${{ steps.env.outputs.key }}.tar.gz

          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            sudo /usr/sbin/purge
            gtar cfvz ${tar_file} -C build/bin geth
          else
            tar cfvz ${tar_file} -C build/bin geth
          fi

          echo "::set-output name=tar_file::${tar_file}"
          echo "::set-output name=checksum::$(shasum -a 256 build/bin/geth | awk '{print $1}')"
      - name: "Verify tarball"
        working-directory: ${{ env.WORKING_DIR }}
        run: |-
          cp ${{ steps.build.outputs.tar_file }} ${{ runner.temp }}
          pushd ${{ runner.temp}}
          tar xfvz *.tar.gz
          actual_checksum=$(shasum -a 256 geth | awk '{print $1}')
          echo "Checksum: ${actual_checksum}"
          popd
          if [ "${{ steps.build.outputs.checksum }}" != "${actual_checksum}" ]; then
            echo "::error::geth checksum validation fails"
            exit 1
          fi
      - name: "Upload artifact"
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.WORKING_DIR }}/build/artifact
          name: ${{ steps.env.outputs.key }}
          if-no-files-found: error
  release:
    needs: build-binary
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dists
      - name: Display structure of downloaded files
        run: ls -R dists
      - name: Tag & release
        uses: ncipollo/release-action@v1.10.0
        with:
          commit: ${{ github.sha }} # Use the current commit SHA
          tag: ${{ github.event.inputs.release-version }}
          artifacts: "**/*.zip"
          body: "Release ${{ github.event.inputs.release-version }}"
